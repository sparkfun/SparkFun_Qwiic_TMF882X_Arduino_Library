{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"The Qwiic TMF882X Arduino Library","text":"<p>The SparkFun Qwiic TMF882X Arduino Library is a single module that supports all SparkFun TMF882X boards based on the TMF882X Time of Flight sensors from AMS. </p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Implemented using the AMS provided TMF882X SDK.</li> <li>Uses a callback function design pattern to efficiently deliver the data results from the connected TMF882X device. </li> <li>Supports factor calibration of the sensor. </li> <li>Enables rapid use of the built in SPAD Map functionality of the device, as well as defining custom SPAD Maps to meet desired needs. </li> <li>Supports data collection based on data counts, timeout value or until a stop command is issues.</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<p>The Getting Started Page outlines library installation and the general use of the Qwiic TMF882X library. </p> <p>Detailed examples are included as part of the library installation process and available in the Arduino IDE <code>File &gt; Examples &gt;</code> menu. </p> <p>A full API Reference is also provided for the library.</p>"},{"location":"#supported-products","title":"Supported Products","text":"<p>The SparkFun Qwiic TMF882X Arduino Library supports the following SparKFun Products</p> SparkFun Qwiic dToF Imager TMF8820 SparkFun Qwiic Mini dToF Imager TMF8820) SparkFun Qwiic dToF Imager TMF8821 SparkFun Qwiic Mini dToF Imager TMF8821"},{"location":"#supported-microcontrollers-arduino-environment","title":"Supported Microcontrollers - Arduino Environment","text":"<ul> <li>Artemis</li> <li>SAMD51</li> <li>ESP32</li> <li>STM32</li> <li>SAMD21</li> <li>nrf5280</li> <li>Teensy</li> </ul>"},{"location":"#license","title":"License","text":"<p>The SparkFun Qwiic TMF882X Arduino Library is licensed using the Open Source MIT License</p>"},{"location":"api_device/","title":"Device Operations","text":"<p>Methods to setup the device, get device information and change device options.</p>"},{"location":"api_device/#initialization","title":"Initialization","text":""},{"location":"api_device/#begin","title":"begin()","text":"<p>This method is called to initialize the TMF882X library and connect to the TMF882X device. This method should be called before accessing the device.</p> <p>The I2C address of the is an optional argument. If not provided, the default address is used.</p> <p>During the initialization process, the device is opened and the runtime firmware loaded onto the device. The TMF882X device is them placed into \"APP\" mode. </p> <pre><code>bool begin(TwoWire &amp;wirePort, uint8_t address)\n</code></pre> Parameter Type Description <code>wirePort</code> <code>TwoWire</code> optional. The Wire port. If not provided, the default port is used <code>address</code> <code>uint8_t</code> optional. I2C Address. If not provided, the default address is used return value <code>bool</code> <code>true</code> on success, <code>false</code> on startup failure"},{"location":"api_device/#loadfirmware","title":"loadFirmware()","text":"<p>To operate the TMF882X device, runtime firmware must be loaded. At startup, this library loads a default firmware version on library initialization.</p> <p>This method allows the library user to set the firmware version on the device if a newer version is available from AMS.</p> <pre><code>bool loadFirmware(const unsigned char *firmwareBinImage, unsigned long length)\n</code></pre> Parameter Type Description <code>firmwareBinImage</code> <code>const unsigned char</code> The firmware binary image <code>length</code> <code>unsigned long</code> The length of the image array return value <code>bool</code> <code>true</code> on success, <code>false</code> on failure"},{"location":"api_device/#isconnected","title":"isConnected()","text":"<p>Called to determine if a TMF882X device, at the provided i2c address is connected.</p> <pre><code>bool isConnected()\n</code></pre> Parameter Type Description return value <code>bool</code> <code>true</code> if connected, <code>false</code> if not"},{"location":"api_device/#seti2caddress","title":"setI2CAddress()","text":"<p>Called to change the I2C address of the connected device.</p> <pre><code>bool setI2CAddress(uint8_t address)\n</code></pre> Parameter Type Description return value <code>bool</code> <code>true</code> on success, <code>false</code> on failure"},{"location":"api_device/#getapplicationversion","title":"getApplicationVersion()","text":"<p>Returns the version of the \"Application\" software running on the connected TMF882X device. See the TMF882X data sheet for more information regarding application software</p> <pre><code>bool getApplicationVersion(char *Version, uint8_t vlen)\n</code></pre> Parameter Type Description <code>Version</code> <code>char*</code> Pointer to a character array to receive the version data <code>vlen</code> <code>uint8_t</code> The length of the array pointed to by Version return value <code>bool</code> <code>true</code> on success, <code>false</code> on failure"},{"location":"api_device/#getdeviceuniqueid","title":"getDeviceUniqueID()","text":"<p>Returns the unique ID of the connected TMF882X.</p> <p>Note</p> <p>This method uses an ID structure as defined by the AMS TMF882X SDK to store the ID value.</p> <pre><code>bool getDeviceUniqueID(struct tmf882x_mode_app_dev_UID &amp;devUID)\n</code></pre> Parameter Type Description <code>deviceUID</code> <code>struct tmf882x_mode_app_dev_UID</code> The TMF882X UID structure to store the ID into. return value <code>bool</code> <code>true</code> on success, <code>false</code> on failure"},{"location":"api_device/#debug-and-development","title":"Debug and Development","text":""},{"location":"api_device/#setdebug","title":"setDebug()","text":"<p>Set the debug state fo the SDK. To use the full debug capabilities of the SDK, debug should be enabled before calling init/begin() on the library</p> <pre><code>void setDebug(bool bEnable)\n</code></pre> Parameter Type Description <code>bEnable</code> <code>bool</code> To enable or disable debug mode in the SDK"},{"location":"api_device/#getdebug","title":"getDebug()","text":"<p>Returns the current debug setting of the library</p> <pre><code>bool getDebug(void)\n</code></pre> Parameter Type Description return value <code>bool</code> <code>true</code> Debug mode enabled, <code>false</code> Debug Mode disabled"},{"location":"api_device/#setinfomessages","title":"setInfoMessages()","text":"<p>Enable/Disable the output of info messages from the AMS SDK.</p> <pre><code>void setInfoMessages(bool bEnable)\n</code></pre> Parameter Type Description <code>bEnable</code> <code>bool</code> To enable or disable info message output from the SDK"},{"location":"api_device/#setmessagelevel","title":"setMessageLevel()","text":"<p>Used to set the message level of the system.</p> <p>The value passed in should be one, or a combination of the following flags.</p> FLAG Description TMF882X_MSG_INFO Output Info messages TMF882X_MSG_DEBUG Output Debug messages TMF882X_MSG_ERROR Output Error messages TMF882X_MSG_ALL Output all messages TMF882X_MSG_NONE Disable all message output the output of info messages from the AMS SDK. <pre><code>void setMessageLevel(uint8_t msg)\n</code></pre> Parameter Type Description <code>msg</code> <code>uint8_t</code> Message type flag(s)"},{"location":"api_device/#getmessagelevel","title":"getMessageLevel()","text":"<p>Return the current message settings. See setMessageLevel() description for possible values</p> <pre><code>uint8_t getMessageLevel(void)\n</code></pre> Parameter Type Description return value <code>uint8_t</code> The current message level settings"},{"location":"api_device/#setoutputdevice","title":"setOutputDevice()","text":"<p>This method is called to provide an output Serial device that the is used to output messages from the underlying AMS SDK.</p> <p>This is needed when debug or info messages are enabled in the library</p> <pre><code>void setOutputDevice(Stream&amp; theStream)\n</code></pre> Parameter Type Description <code>theStream</code> <code>Stream</code> The output stream device - normally a Serial port."},{"location":"api_device/#gettmf882xcontext","title":"getTMF882XContext()","text":"<p>Returns the context structure used by this library when accessing the underlying TMF882X SDK.</p> <p>With this structure,  users of this library can make direct calls to the interface functions of the TMF882X SDK.</p> <p>Warning</p> <p>Calling the TMF882X SDK functions directly could impact the operation of this library. Use this option with caution.</p> <pre><code>tmf882x_tof &amp;getTMF882XContext(void)\n</code></pre> Parameter Type Description return value <code>tmf882x_tof</code> The TMF882X Context being used by this library."},{"location":"api_operation/","title":"Operation","text":"<p>Methods used to read data from the connected TMF882X device.</p>"},{"location":"api_operation/#data-callback-functions","title":"Data Callback Functions","text":"<p>The TMF882X SDK returns data via a message structure passed to a user provided C function. This library allows the user to register callback functions that are called during the measurement operation. </p> <p>The user has the option to register a generic message callback function, or specific functions based on message type. </p>"},{"location":"api_operation/#setmessagehandler","title":"setMessageHandler()","text":"<p>Call this method with a function that is called when any message is sent from the AMS sdk. The function passed into this method can be used to handle all messages instead of using the other handlers for specific message types.</p> <p>The passed in function should be of type <code>TMF882XMessageHandler</code>, which is defined as:</p> <pre><code>typedef void (*TMF882XMessageHandler)(struct tmf882x_msg *msg);\n</code></pre> <p>This function accepts a parameter of type tmf882x_msg, which is defined as:</p> <p><pre><code>struct tmf882x_msg {\n    union {\n        struct tmf882x_msg_header       hdr;\n        struct tmf882x_msg_error        err_msg;\n        struct tmf882x_msg_histogram    hist_msg;\n        struct tmf882x_msg_meas_results meas_result_msg;\n        struct tmf882x_msg_meas_stats   meas_stat_msg;\n        uint8_t msg_buf[TMF882X_MAX_MSG_SIZE];\n    };\n};\n</code></pre> The type of the message is defined in <code>msg-&gt;hdr.msg_id</code>, and is one of the following types:</p> Type Description ID_MEAS_RESULTS The results of a measurement - <code>meas_result_msg</code> is valid. ID_MEAS_STATS The measurement statistics - <code>meas_stat_msg</code> is valid. ID_HISTOGRAM The histogram of a measurement - <code>hist_msg</code> is valid. ID_ERROR An error occurred - <code>err_msg</code> is valid. <pre><code>void setMessageHandler(TMF882XMessageHandler handler)\n</code></pre> Parameter Type Description handler <code>TMF882XMessageHandler</code> The message handler callback C function"},{"location":"api_operation/#setmeasurementhandler","title":"setMeasurementHandler()","text":"<p>Call this method with a function that is called when measurement data is sent from the AMS sdk.</p> <p>The passed in function should be of type <code>TMF882XMeasurementHandler</code>, which is defined as:</p> <pre><code>typedef void (*TMF882XMeasurementHandler)(struct tmf882x_msg_meas_results *message);\n</code></pre> <p>This function accepts a parameter of type tmf882x_msg_meas_results, which is defined as:</p> <p><pre><code>struct tmf882x_msg_meas_results {\n    struct tmf882x_msg_header hdr;\n    uint32_t result_num;         /* increments with every new bunch of results */\n    uint32_t temperature;        /* temperature */\n    uint32_t ambient_light;      /* ambient light level */\n    uint32_t photon_count;       /* photon count */\n    uint32_t ref_photon_count;   /* reference photon count */\n    uint32_t sys_ticks;          /* system ticks */\n    uint32_t valid_results;      /* number of valid results */\n    uint32_t num_results;        /* number of results */\n    struct tmf882x_meas_result results[TMF882X_MAX_MEAS_RESULTS];\n};\n</code></pre> The fields of the message structure are defined as:</p> field Description result_num This is the result number reported by the device. temperature This is the temperature reported by the device (in Celsius) ambient_light This is the ambient light level reported by the device photon_count This is the photon count reported by the device ref_photon_count This is the reference channel photon count reported by the device sys_ticks This is the system tick counter (5MHz counter) reported by the device. This is used by the core driver to perform clock compensation correction on the measurement results. valid_results This is the number of targets reported by the device num_results This is the number of non-zero targets counted by the core driver results This is the list of measurement targets @ref struct tmf882x_meas_result <pre><code>void setMeasurementHandler(TMF882XMeasurementHandler handler)\n</code></pre> Parameter Type Description handler <code>TMF882XMeasurementHandler</code> The message handler callback C function"},{"location":"api_operation/#sethistogramhandler","title":"setHistogramHandler()","text":"<p>Call this method with a function that is called when histogram data is sent from the AMS sdk.</p> <p>The passed in function should be of type <code>TMF882XHistogramHandler</code>, which is defined as:</p> <pre><code>typedef void (*TMF882XHistogramHandler)(struct tmf882x_msg_histogram * message);\n</code></pre> <p>This function accepts a parameter of type tmf882x_msg_histogram, which is defined as:</p> <p><pre><code>struct tmf882x_msg_histogram {\n    struct tmf882x_msg_header hdr;\n    uint32_t capture_num;       /* matches the value of 'result_num' from measure result messages*/\n    uint32_t sub_capture;       /* sub-capture measurement nubmer for time multiplexed measurements*/\n    uint32_t histogram_type;    /* RAW, ELEC_CAL, etc */\n    uint32_t num_tdc;           /* Number of histogram channels in this message */\n    uint32_t num_bins;          /* length of histogram(s) for each channel */\n    uint32_t bins[TMF882X_HIST_NUM_TDC][TMF882X_HIST_NUM_BINS];\n};\n</code></pre> The fields of the message structure are defined as:</p> field Description capture_num This is the capture number that this set of histograms is associated with. The capture_num will match the  <code>struct tmf882x_msg_meas_results::result_num</code> sub_capture This is the time-multiplexed sub-capture index of this set of histograms. For non-time-multiplexed measurements this value is always zero. histogram_type This is the histogram type identifier code <code>enum tmf882x_histogram_type</code> num_tdc This is the number of TDC histograms being published num_bins This is the number of bins in the histograms being published bins These are the histogram bin values for each TDC. There are two channels per TDC, the first channel histogram occupies bins <code>[0 : TMF882X_HIST_NUM_BINS/2 - 1]</code>, the 2nd channel occupies bins <code>[TMF882X_HIST_NUM_BINS/2 : @ref TMF882X_HIST_NUM_BINS - 1]</code> <pre><code>void setHistogramHandler(TMF882XHistogramHandler handler)\n</code></pre> Parameter Type Description handler <code>TMF882XHistogramHandler</code> The message handler callback C function"},{"location":"api_operation/#setstatshandler","title":"setStatsHandler()","text":"<p>Call this method with a function that is called when measurement statistics data is sent from the AMS sdk.</p> <p>The passed in function should be of type <code>TMF882XStatsHandler</code>, which is defined as:</p> <pre><code>typedef void (*TMF882XStatsHandler)(struct tmf882x_msg_meas_stats *message);\n</code></pre> <p>This function accepts a parameter of type tmf882x_msg_meas_stats, which is defined as:</p> <p><pre><code>struct tmf882x_msg_meas_stats {\n    struct tmf882x_msg_header hdr;\n    uint32_t capture_num;       /* matches the value of 'result_num' from measure result messages*/\n    uint32_t sub_capture;       /* sub-capture measurement nubmer for time multiplexed measurements*/\n    uint32_t tdcif_status;\n    uint32_t iterations_configured;\n    uint32_t remaining_iterations;\n    uint32_t accumulated_hits;\n    uint32_t raw_hits[TMF882X_HIST_NUM_TDC];\n    uint32_t saturation_cnt[TMF882X_HIST_NUM_TDC];\n};\n</code></pre> The fields of the message structure are defined as:</p> field Description capture_num This is the capture number that this set of histograms is associated with. The capture_num will match the  <code>struct tmf882x_msg_meas_results::result_num</code> sub_capture This is the time-multiplexed sub-capture index of this set of histograms. For non-time-multiplexed measurements this value is always zero. tdcif_status This is the tdcif status reported by the device iterations_configured This is the iterations configured reported by the device remaining_iterations This is the remaining iterations reported by the device accumulated_hits This is the accumulated hits reported by the device raw_hits This is the raw hits reported by the device for each TDC saturation_cnt This is the saturation count reported by the device for each TDCd <pre><code>void setStatsHandler(TMF882XStatsHandler handler)\n</code></pre> Parameter Type Description handler <code>TMF882XStatsHandler</code> The message handler callback C function"},{"location":"api_operation/#seterrorhandler","title":"setErrorHandler()","text":"<p>Call this method with a function that is called when error information is sent from the AMS sdk.</p> <p>The passed in function should be of type <code>TMF882XErrorHandler</code>, which is defined as:</p> <pre><code>typedef void (*TMF882XErrorHandler)(struct tmf882x_msg_error *message);\n</code></pre> <p>This function accepts a parameter of type tmf882x_msg_error, which is defined as:</p> <p><pre><code>struct tmf882x_msg_error {\n    struct tmf882x_msg_header hdr;\n    uint32_t err_code;\n};\n</code></pre> The fields of the message structure are defined as:</p> field Description err_code This is the error code identifier <pre><code>void setErrorHandler(TMF882XErrorHandler handler)\n</code></pre> Parameter Type Description handler <code>TMF882XErrorHandler</code> The message handler callback C function"},{"location":"api_operation/#measurement-methods","title":"Measurement Methods","text":""},{"location":"api_operation/#startmeasuring","title":"startMeasuring()","text":"<p>Start measuring distance/data on the TMF882X device. This method returns after one measurement is performed.</p> <p>Measurement data is returned in the provided measurement struct.</p> <pre><code>int startMeasuring(struct tmf882x_msg_meas_results results, uint32_t timeout = 0)\n</code></pre> Parameter Type Description results <code>struct tmf882x_msg_meas_results</code> The results of the measurement timeout <code>uint32_t</code> [OPTIONAL] The time, in milliseconds, to take measurements. A value of zero [default value] indicates no timeout set return value <code>int</code> The number of measurements taken (1), or -1 on error."},{"location":"api_operation/#startmeasuring_1","title":"startMeasuring()","text":"<p>Start measuring distance/data on the TMF882X device. This method won't return until the measurement activity ends.</p> <p>Measurement data is passed to the library user via a callback function, which is set using one of the setHandler() methods on this object. <p>Measurements continue, until one of the following conditions occurs:</p> <ul> <li>The specified number of measurements took place (set via reqMeasurements)</li> <li>The specified timeout value expires</li> <li>The stopMeasuring() method was called in a Handler function.</li> </ul> <p>This method won't start measuring if a measurement limit isn't set, a timeout isn't set and no callback handlers are not set.</p> <p>This method returns the number of measurements taken</p> <pre><code>int startMeasuring(uint32_t reqMeasurements = 0, uint32_t timeout = 0)\n</code></pre> Parameter Type Description reqMeasurements <code>uint32_t</code> [OPTIONAL] The number of measurements desired. A value of zero [the default value] indicates no limit timeout <code>uint32_t</code> [OPTIONAL] The time, in milliseconds, to take measurements. A value of zero [default value] indicates no timeout set return value <code>int</code> The number of measurements taken, or -1 on error."},{"location":"api_operation/#stopmeasuring","title":"stopMeasuring()","text":"<p>Called to stop the device measuring loop. Normally called in a message handler function.</p> <pre><code>void stopMeasuring(void)\n</code></pre> Parameter Type Description None"},{"location":"api_operation/#setsampledelay","title":"setSampleDelay()","text":"<p>Set the delay used in the libraries sample loop used when processing samples/reading from the device.</p> <pre><code>void setSampleDelay(uint16_t delay)\n</code></pre> Parameter Type Description delay <code>uint16_t</code> The delay to use, in milli-seconds."},{"location":"api_operation/#getsampledelay","title":"getSampleDelay()","text":"<p>Returns the current value of the library processing loop delay. The value is ib milliseconds..</p> <pre><code>uint16_t getSampleDelay(void)\n</code></pre> Parameter Type Description return value <code>uint16_t</code> The current delay, in milli-seconds."},{"location":"api_setup/","title":"Device Setup","text":"<p>Methods used to setup and configure the device before taking data samples. </p>"},{"location":"api_setup/#configuration","title":"Configuration","text":""},{"location":"api_setup/#gettmf882xconfig","title":"getTMF882XConfig()","text":"<p>The underlying TMF882X SDK uses a \"configuration structure\" to read and modify the configuration of the connected device. This method retrieves the current configuration of the device.</p> <p>When changing a value of the configuration, the following steps are taken: * Retrieve the current configuration using <code>getTMF882XConfig()</code> * Change the value in the configuration structure * Updating the device configuration using the method <code>setTMF882XConfig()</code></p> <p>The configuration is transferred as a structure of type <code>struct tmf882x_mode_app_config</code>. This structure is defined by the TMF882X SDK, and contains the following fields:</p> Type Struct Field Description uint16_t report_period_ms Result reporting period in milliseconds uint16_t kilo_iterations Iterations * 1024 for measurements uint16_t low_threshold Low distance threshold setting triggering interrupts uint16_t high_threshold High distance threshold setting triggering interrupts uint32_t zone_mask Zone mask for disabling interrupts for certain channels uint8_t persistence Persistence setting for generating interrupts uint8_t confidence_threshold Confidence threshold for generating interrupts uint8_t gpio_0 GPIO_0 config settings uint8_t gpio_1 GPIO_1 config settings uint8_t power_cfg Power configuration settings uint8_t spad_map_id Spad map identifier uint32_t alg_setting Algorithm setting configuration uint8_t histogram_dump Histogram dump configuration uint8_t spread_spectrum Spread Spectrum configuration uint8_t i2c_slave_addr I2C slave address configuration uint16_t oscillator_trim Sensor Oscillator trim value <p>The details and specific values for the above fields are detailed in the TMF882X datasheet.</p> <pre><code> bool getTMF882XConfig(struct tmf882x_mode_app_config tofConfig)\n</code></pre> Parameter Type Description tofConfig <code>struct tmf882x_mode_app_config</code> A configuration structure that the current configuration data is copied to return value <code>bool</code> <code>true</code> on success, <code>false</code> on an error"},{"location":"api_setup/#settmf882xconfig","title":"setTMF882XConfig()","text":"<p>Call this method to set the current configuration page in the connected TMF882X device. A <code>tmf882x_mode_app_config</code> structure with the desired values is passed into this method. Details of the structure fields are listed in the description of the <code>getTMF882XConfig()</code> method.</p> <p>When changing a value of the configuration, the following steps are taken: * Retrieve the current configuration using <code>getTMF882XConfig()</code> * Change the value in the configuration structure * Updating the device configuration using the method <code>setTMF882XConfig()</code></p> <pre><code>bool setTMF882XConfig(struct tmf882x_mode_app_config tofConfig)\n</code></pre> Parameter Type Description tofConfig <code>struct tmf882x_mode_app_config</code> A configuration structure that has the desired settings for the device return value <code>bool</code> <code>true</code> on success, <code>false</code> on an error"},{"location":"api_setup/#calibration","title":"Calibration","text":""},{"location":"api_setup/#factorycalibration","title":"factoryCalibration()","text":"<p>Used to run a factory calibration on the connected TMF882X device. The results of the calibration are returned in the passed in calibration structure.</p> <p>Consult the TMF882X datasheet for details on performing a factory calibration</p> <pre><code>bool factoryCalibration(struct tmf882x_mode_app_calib tofCalib);\n</code></pre> Parameter Type Description tofCalib <code>struct tmf882x_mode_app_calib</code> The results of the calibration process return value <code>bool</code> <code>true</code> on success, <code>false</code> on an error"},{"location":"api_setup/#setcalibration","title":"setCalibration()","text":"<p>Used to set the calibration data on the connected TMF882X device.</p> <p>Consult the TMF882X datasheet for details on calibration data.</p> <pre><code>bool setCalibration(struct tmf882x_mode_app_calib tofCalib)\n</code></pre> Parameter Type Description tofCalib <code>struct tmf882x_mode_app_calib</code> The calibration data to set return value <code>bool</code> <code>true</code> on success, <code>false</code> on an error"},{"location":"api_setup/#getcalibration","title":"getCalibration()","text":"<p>Used to get the calibration data on the connected TMF882X device.</p> <p>Consult the TMF882X datasheet for details on calibration data.</p> <pre><code>bool setCalibration(struct tmf882x_mode_app_calib tofCalib)\n</code></pre> Parameter Type Description tofCalib <code>struct tmf882x_mode_app_calib</code> The calibration data return value <code>bool</code> <code>true</code> on success, <code>false</code> on an error"},{"location":"api_setup/#spad-settings","title":"SPAD Settings","text":""},{"location":"api_setup/#getcurrentspadmap","title":"getCurrentSPADMap()","text":"<p>This method returns the ID of the current SPAD Map in use on the device. The TMF882X uses a SPAD Map to control the viewing geometry of the sample data retrieved from the sensor. Consult the TMF882X datasheet for SPAD Map details as available ID values. </p> <pre><code>uint8_t getCurrentSPADMap(void)\n</code></pre> Parameter Type Description return value <code>uint8_t</code> <code>0</code> on error, otherwise the ID of the SPAD Map"},{"location":"api_setup/#setcurrentspadmap","title":"setCurrentSPADMap()","text":"<p>This method sets the current SPAD map in the connected device. The SPAD Map is specified by its ID. Available SPAD Maps and their associated IDs are listed in the TMF882X datasheet.</p> <pre><code>bool setCurrentSPADMap(uint8_t idSPAD)\n</code></pre> Parameter Type Description idSPAD <code>uint8_t</code> The ID of the SPAD to make current on the device return value <code>bool</code> <code>true</code> on success, <code>false</code> on an error"},{"location":"api_setup/#getspadconfig","title":"getSPADConfig()","text":"<p>Retrieve the current SPAD configuration from the connected device. This configuration is returned as a <code>tmf882x_mode_app_spad_config</code> structure. </p> <p>The SPAD configuration structure is defined as follows: <pre><code>struct tmf882x_mode_app_spad_config {\n    struct tmf882x_mode_app_single_spad_config {\n        int8_t xoff_q1;\n        int8_t yoff_q1;\n        uint8_t xsize;\n        uint8_t ysize;\n        uint8_t spad_mask[TMF8X2X_COM_MAX_SPAD_SIZE];\n        uint8_t spad_map[TMF8X2X_COM_MAX_SPAD_SIZE];\n    } spad_configs[TMF8X2X_MAX_CONFIGURATIONS];\n    uint32_t num_spad_configs;\n};\n</code></pre> The fields are defined as:</p> Type Struct Field Description int8_t xoff_q1 X-direction offset in Q1 format int8_t yoff_q1 Y-direction offset in Q1 format uint8_t xsize Size of spad map in X-direction uint8_t ysize Size of spad map in Y-direction uint8_t spad_mask Spad enable mask configuration (1 enable, 0 disable) uint8_t spad_map Spad channel mapping for measurement (channels 1 - 9) uint32_t num_spad_configs he number of spad configurations <p>The details and specific values for the above fields are detailed in the TMF882X datasheet.</p> <pre><code>bool getSPADConfig(struct tmf882x_mode_app_spad_config tofSpad)\n</code></pre> Parameter Type Description tofSpad <code>struct tmf882x_mode_app_spad_config</code> Struct to hold the current SPAD configuration values. return value <code>bool</code> <code>true</code> on success, <code>false</code> on an error"},{"location":"api_setup/#setspadconfig","title":"setSPADConfig()","text":"<p>Set the current SPAD configuration in the connected device. This configuration is set using a <code>tmf882x_mode_app_spad_config</code> structure. This method is used to set custom SPAD Maps in the TMF882X.</p> <p>See the descriptor of <code>getSPADConfig()</code> for details of the <code>tmf882x_mode_app_spad_config</code>.</p> <pre><code>bool setSPADConfig(struct tmf882x_mode_app_spad_config tofSpad)\n</code></pre> Parameter Type Description tofSpad <code>struct tmf882x_mode_app_spad_config</code> The config values for the on device SPAD settings. return value <code>bool</code> <code>true</code> on success, <code>false</code> on an error"},{"location":"software/","title":"Software Setup","text":""},{"location":"software/#installation","title":"Installation","text":"<p>The SparkFun Qwiic TMF882X Arduino Library is available within in the Arduino library manager, which is launched via the <code>Sketch &gt; Include Libraries &gt; Manage Libraries \u2026</code> menu option in the Arduino IDE. Just search for SparkFun Qwiic TMF882X Library</p> <p>Note</p> <p>This guide assumes you are using the latest version of the Arduino IDE on your desktop. The following resources available at SparkFun provide the details on setting up and configuring Arduino to use this library.</p> <ul> <li>Installing the Arduino IDE</li> <li>Installing Board Definitions in the Arduino IDE</li> <li>Installing an Arduino Library</li> </ul>"},{"location":"software/#general-use-pattern","title":"General Use Pattern","text":"<p>After installing this library in your local Arduino environment, begin with a standard Arduino sketch, and include the header file for this library. <pre><code>// Include the SparkFun Qwiic TMF882X Library\n#include &lt;SparkFun_TMF882X_Library.h&gt;\n</code></pre> The next step is to declare the object for the SparkFun Qwiic TMF882X device used. Like most Arduino sketches, this is done at a global scope (after the include file declaration), not within the <code>setup()</code> or <code>loop()</code> functions. </p> <p>For all supported boards, the same object is used: <code>SparkFun_TMF882X</code>. <pre><code>SparkFun_TMF882X  myTMF882X;\n</code></pre> In the <code>setup()</code> function of this sketch, like all of the SparkFun qwiic libraries, the device is initialized by calling the <code>begin()</code> method. This method returns a value of <code>true</code> on success, or <code>false</code> on failure.  <pre><code>void setup()\n{\n    Serial.begin(115200);\n\n    if(!myTMF882X.begin()){\n        Serial.println(\"Device failed to initialize\");\n        while(1);  // halt execution\n    }\n    Serial.println(\"Device is initialized\");\n\n}\n</code></pre> Now that device is initialized, the <code>loop()</code> function can call the library to retrieve a single data sample from the connected TMF882X device.</p> <p>Taken from the libraries Example 1, once a measurement is taken, the relevant data is output to the Serial device.</p> <pre><code>void loop()\n{\n    delay(2000);\n\n    // get a Measurement\n    if(myTMF882X.startMeasuring(myResults))\n    {\n        // print out results\n        Serial.println(\"Measurement:\");\n        Serial.print(\"     Result Number: \"); \n            Serial.print(myResults.result_num);\n        Serial.print(\"  Number of Results: \"); \n            Serial.println(myResults.num_results);       \n\n        for (int i = 0; i &lt; myResults.num_results; ++i) \n        {\n            Serial.print(\"       conf: \"); \n                Serial.print(myResults.results[i].confidence);\n            Serial.print(\" distance mm: \"); \n                Serial.print(myResults.results[i].distance_mm);\n            Serial.print(\" channel: \"); \n                Serial.print(myResults.results[i].channel);\n            Serial.print(\" sub_capture: \"); \n                Serial.println(myResults.results[i].sub_capture);   \n\n        }\n        Serial.print(\"     photon: \"); \n            Serial.print(myResults.photon_count);    \n        Serial.print(\" ref photon: \"); \n            Serial.print(myResults.ref_photon_count);\n        Serial.print(\" ALS: \"); \n            Serial.println(myResults.ambient_light); \n        Serial.println();\n\n    }\n\n}\n</code></pre>"},{"location":"software/#advanced-data-collection","title":"Advanced Data Collection","text":"<p>The TMF882X is unique when compared to our other qwiic libraries. Instead of data being returned directly from a method, measured data is passed back to the user via a callback function. This is how the underlying TMF882X SDK framework is designed and works well for interactive sensors like the TMF882X. </p> <p>To receive data, a callback function is defined. For this example, we define a callback that prints out the detected data.</p> <p><pre><code>void onMeasurementCallback(struct tmf882x_msg_meas_results *myResults)\n{\n    nSample++;\n\n    Serial.print(\"Sample Number: \");\n    Serial.println(nSample);\n\n    // print out results\n    // Not Shown here - This is similar to the output shown in the\n    // previous example.\n}\n</code></pre> In the <code>setup()</code> function of this example after the device is initialized, the defined callback function is registered with the TMF882 object.</p> <pre><code>void setup()\n{\n    Serial.begin(115200);\n\n    if(!myTMF882X.begin()){\n        Serial.println(\"Device failed to initialize\");\n        while(1);  // halt execution\n    }\n    Serial.println(\"Device is initialized\");\n\n    // set our callback function in the library.\n    myTMF882X.setMeasurementHandler(onMeasurementCallback);\n}\n</code></pre> <p>For this example, in the <code>loop()</code> function, a measurement session is started, requesting that four samples be taken before returning from the method call. When data is detected by the TMF882X, the <code>onMeasurementCallback()</code> function, is called with the detected results. Once four measurements are taken, the measurement is finished and the TMF882X sensing session is stopped. </p> <pre><code>void loop()\n{\n    delay(2000);\n\n    // get a measurement\n    // Have the sensor take 4 measurements. \n    // \n    // As measurements are taken, the results are sent to the above function, \n    // \"onMeasurementCallback()\"\n\n    nSample=0; // simple counter\n    myTMF882X.startMeasuring(4);\n\n}\n</code></pre>"},{"location":"software/#library-provided-examples","title":"Library Provided Examples","text":"<p>The SparkFun Qwiic TMF882X Arduino Library, includes a wide variety of examples. These are available from the Examples menu of the Arduino IDE, and in the <code>examples</code>folder of this repository. </p> <p>For a detailed description of the examples, see the Examples section of the documentation.</p>"}]}